// Define o método Object.create se não estiver disponível
if (typeof Object.create !== 'function') {
    Object.create = function (prototype) {
      function F() {}
      F.prototype = prototype;
      return new F();
    };
  }
  
  (function ($, window, document) {
    "use strict";
  
    const Toast = {
      _positionClasses: ["bottom-left", "bottom-right", "top-right", "top-left", "bottom-center", "top-center", "mid-center"],
      _defaultIcons: ["success", "error", "info", "warning"],
  
      init(options, defaults) {
        this.options = $.extend({}, defaults, typeof options === 'string' ? { text: options } : options);
        this.process();
      },
  
      process() {
        this.setup();
        this.addToDom();
        this.position();
        this.bindToast();
        this.animate();
      },
  
      setup() {
        let content = '<span class="jq-toast-loader"></span>';
        
        if (this.options.allowToastClose) {
          content += '<span class="close-jq-toast-single">&times;</span>';
        }
  
        if (Array.isArray(this.options.text)) {
          if (this.options.heading) content += `<h2 class="jq-toast-heading">${this.options.heading}</h2>`;
          content += '<ul class="jq-toast-ul">';
          this.options.text.forEach((text, index) => {
            content += `<li class="jq-toast-li" id="jq-toast-item-${index}">${text}</li>`;
          });
          content += '</ul>';
        } else {
          if (this.options.heading) content += `<h2 class="jq-toast-heading">${this.options.heading}</h2>`;
          content += this.options.text;
        }
  
        this._toastEl = this._toastEl || $('<div></div>', { class: "jq-toast-single" }).html(content);
        if (this.options.bgColor) this._toastEl.css("background-color", this.options.bgColor);
        if (this.options.textColor) this._toastEl.css("color", this.options.textColor);
        if (this.options.textAlign) this._toastEl.css("text-align", this.options.textAlign);
        if (this.options.icon && this._defaultIcons.includes(this.options.icon)) {
          this._toastEl.addClass(`jq-icon-${this.options.icon}`);
        }
        if (this.options.class) this._toastEl.addClass(this.options.class);
      },
  
      position() {
        const container = this._container = $(".jq-toast-wrap").length ? $(".jq-toast-wrap") : $('<div></div>', { class: "jq-toast-wrap", role: "alert", "aria-live": "polite" }).appendTo("body");
  
        if (typeof this.options.position === 'string' && this._positionClasses.includes(this.options.position)) {
          container.addClass(this.options.position);
        } else if (typeof this.options.position === 'object') {
          container.css(this.options.position);
        } else {
          container.addClass("bottom-left");
        }
      },
  
      bindToast() {
        this._toastEl.on("afterShown", () => this.processLoader());
  
        this._toastEl.find(".close-jq-toast-single").on("click", (e) => {
          e.preventDefault();
          this._toastEl[this.options.showHideTransition]('fadeOut', () => this._toastEl.trigger("afterHidden"));
        });
  
        if (typeof this.options.onClick === "function") {
          this._toastEl.on("click", () => this.options.onClick(this._toastEl));
        }
      },
  
      addToDom() {
        const container = $(".jq-toast-wrap").length ? $(".jq-toast-wrap") : $('<div></div>', { class: "jq-toast-wrap", role: "alert", "aria-live": "polite" }).appendTo("body");
  
        if (this.options.stack && !isNaN(this.options.stack)) {
          const excess = container.find(".jq-toast-single").length - this.options.stack;
          if (excess > 0) container.find(".jq-toast-single").slice(0, excess).remove();
        }
        container.append(this._toastEl);
      },
  
      canAutoHide() {
        return this.options.hideAfter && !isNaN(this.options.hideAfter);
      },
  
      processLoader() {
        if (!this.canAutoHide() || !this.options.loader) return;
        this._toastEl.find(".jq-toast-loader").css("width", "100%").addClass("jq-toast-loaded");
      },
  
      animate() {
        this._toastEl.hide().fadeIn(() => this._toastEl.trigger("afterShown"));
        
        if (this.canAutoHide()) {
          setTimeout(() => {
            this._toastEl.fadeOut(() => this._toastEl.trigger("afterHidden"));
          }, this.options.hideAfter);
        }
      },
  
      reset(clearAll) {
        clearAll === "all" ? $(".jq-toast-wrap").remove() : this._toastEl.remove();
      },
  
      update(newOptions) {
        this.init(newOptions, this.options);
      },
  
      close() {
        this._toastEl.find(".close-jq-toast-single").click();
      }
    };
  
    $.toast = function (options) {
      const instance = Object.create(Toast);
      instance.init(options, $.toast.options);
      return {
        reset: (clearAll) => instance.reset(clearAll),
        update: (newOptions) => instance.update(newOptions),
        close: () => instance.close()
      };
    };
  
    $.toast.options = {
      text: "",
      heading: "",
      showHideTransition: "fade",
      allowToastClose: true,
      hideAfter: 3000,
      loader: true,
      loaderBg: "#9EC600",
      stack: 5,
      position: "bottom-left",
      bgColor: false,
      textColor: false,
      textAlign: "left",
      icon: false,
      onClick: function () {}
    };
  })(jQuery, window, document);
  